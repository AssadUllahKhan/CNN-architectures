{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyM0J0cdCtaBLXTc99eR15FF"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yDatXwHtax27","executionInfo":{"status":"ok","timestamp":1730547153293,"user_tz":-300,"elapsed":3111,"user":{"displayName":"Asad Ullah","userId":"12251528893146048503"}},"outputId":"422ff0cd-cb7f-471d-ae29-e4aed13a521b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Path to dataset files: /root/.cache/kagglehub/datasets/borhanitrash/animal-image-classification-dataset/versions/1\n"]}],"source":["import kagglehub\n","\n","# Download latest version\n","path = kagglehub.dataset_download(\"borhanitrash/animal-image-classification-dataset\")\n","\n","print(\"Path to dataset files:\", path)"]},{"cell_type":"code","source":["from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","\n","# Define the path to your dataset\n","dataset_path = path+'/Animals'  # Use the path you got from the previous step\n","\n","# Create image generators for training and validation\n","train_datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)\n","\n","train_generator = train_datagen.flow_from_directory(\n","    dataset_path,\n","    target_size=(227, 227),  # AlexNet input size\n","    batch_size=32,\n","    class_mode='categorical',\n","    subset='training'\n",")\n","\n","validation_generator = train_datagen.flow_from_directory(\n","    dataset_path,\n","    target_size=(227, 227),\n","    batch_size=32,\n","    class_mode='categorical',\n","    subset='validation'\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FIlFuzV3a5Mv","executionInfo":{"status":"ok","timestamp":1730547155616,"user_tz":-300,"elapsed":31,"user":{"displayName":"Asad Ullah","userId":"12251528893146048503"}},"outputId":"ab3ffa52-dece-4bef-83b1-64cb6dc1c4cb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 2400 images belonging to 3 classes.\n","Found 600 images belonging to 3 classes.\n"]}]},{"cell_type":"code","source":["from tensorflow.keras import layers, models\n","\n","def create_alexnet(input_shape, num_classes):\n","    model = models.Sequential()\n","    model.add(layers.Conv2D(96, (11, 11), strides=(4, 4), activation='relu', input_shape=input_shape))\n","    model.add(layers.MaxPooling2D(pool_size=(3, 3), strides=(2, 2)))\n","    model.add(layers.Conv2D(256, (5, 5), activation='relu', padding='same'))\n","    model.add(layers.MaxPooling2D(pool_size=(3, 3), strides=(2, 2)))\n","    model.add(layers.Conv2D(384, (3, 3), activation='relu', padding='same'))\n","    model.add(layers.Conv2D(384, (3, 3), activation='relu', padding='same'))\n","    model.add(layers.Conv2D(256, (3, 3), activation='relu', padding='same'))\n","    model.add(layers.MaxPooling2D(pool_size=(3, 3), strides=(2, 2)))\n","    model.add(layers.Flatten())\n","    model.add(layers.Dense(4096, activation='relu'))\n","    model.add(layers.Dropout(0.5))\n","    model.add(layers.Dense(4096, activation='relu'))\n","    model.add(layers.Dropout(0.5))\n","    model.add(layers.Dense(num_classes, activation='softmax'))\n","\n","    return model\n","\n","# Initialize the model\n","input_shape = (227, 227, 3)  # AlexNet input size\n","num_classes = len(train_generator.class_indices)\n","model = create_alexnet(input_shape, num_classes)\n"],"metadata":{"id":"lMCEi8P5bek6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.compile(optimizer='adam',\n","              loss='categorical_crossentropy',\n","              metrics=['accuracy'])\n"],"metadata":{"id":"1YUQ50h7bnv8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["history = model.fit(\n","    train_generator,\n","    steps_per_epoch=train_generator.samples // train_generator.batch_size,\n","    validation_data=validation_generator,\n","    validation_steps=validation_generator.samples // validation_generator.batch_size,\n","    epochs=10  # Adjust the number of epochs as needed\n",")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AM1fRmNWc73g","executionInfo":{"status":"ok","timestamp":1730547208080,"user_tz":-300,"elapsed":42194,"user":{"displayName":"Asad Ullah","userId":"12251528893146048503"}},"outputId":"0823f0ac-9805-48dc-f28f-757415e175a8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 81ms/step - accuracy: 0.3399 - loss: 2.1725 - val_accuracy: 0.3368 - val_loss: 1.0985\n","Epoch 2/10\n","\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.0000e+00 - loss: 0.0000e+00 - val_accuracy: 0.2500 - val_loss: 1.1039\n","Epoch 3/10\n","\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 86ms/step - accuracy: 0.3211 - loss: 1.0990 - val_accuracy: 0.3316 - val_loss: 1.0990\n","Epoch 4/10\n","\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.0000e+00 - loss: 0.0000e+00 - val_accuracy: 0.3750 - val_loss: 1.0968\n","Epoch 5/10\n","\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 71ms/step - accuracy: 0.3305 - loss: 1.1000 - val_accuracy: 0.3351 - val_loss: 1.0993\n","Epoch 6/10\n","\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 510us/step - accuracy: 0.0000e+00 - loss: 0.0000e+00 - val_accuracy: 0.2917 - val_loss: 1.1027\n","Epoch 7/10\n","\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 86ms/step - accuracy: 0.3037 - loss: 1.1003 - val_accuracy: 0.3316 - val_loss: 1.0988\n","Epoch 8/10\n","\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 489us/step - accuracy: 0.0000e+00 - loss: 0.0000e+00 - val_accuracy: 0.3750 - val_loss: 1.0987\n","Epoch 9/10\n","\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 76ms/step - accuracy: 0.3121 - loss: 1.0993 - val_accuracy: 0.3438 - val_loss: 1.0986\n","Epoch 10/10\n","\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 864us/step - accuracy: 0.0000e+00 - loss: 0.0000e+00 - val_accuracy: 0.0833 - val_loss: 1.0991\n"]}]},{"cell_type":"code","source":["val_loss, val_accuracy = model.evaluate(validation_generator)\n","print(f'Validation Loss: {val_loss}, Validation Accuracy: {val_accuracy}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gAMfXK4hpO9b","executionInfo":{"status":"ok","timestamp":1730547221482,"user_tz":-300,"elapsed":3088,"user":{"displayName":"Asad Ullah","userId":"12251528893146048503"}},"outputId":"76952666-5926-4ef2-bb0e-d1c8d75666e8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 70ms/step - accuracy: 0.3389 - loss: 1.0985\n","Validation Loss: 1.0986284017562866, Validation Accuracy: 0.3333333432674408\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"dpZuMHl8pRGu"},"execution_count":null,"outputs":[]}]}